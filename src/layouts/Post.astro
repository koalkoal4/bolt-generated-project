---
// src/layouts/Post.astro
import BaseLayout from './Base.astro';
const { frontmatter } = Astro.props;
const allPosts = await Astro.glob('../pages/posts/*.md');

// Helper function to normalize URL paths
const normalizePath = (path) => {
  return path.replace(/\/$/, ''); // Remove trailing slash
};

// Filter out the current post using normalized paths
const otherPosts = allPosts.filter(post => normalizePath(post.url) !== normalizePath(Astro.url.pathname));

const currentTags = frontmatter.tags || []; // Get current post's tags, default to empty array

// Find posts with at least one common tag
const relatedPosts = otherPosts.filter(post => {
  const postTags = post.frontmatter.tags || [];
  // Check if any tag in postTags exists in currentTags
  return postTags.some(tag => currentTags.includes(tag));
});

// Determine suggested posts: prioritize related, fill with recent if needed
const MAX_SUGGESTIONS = 3;
let suggestedPosts = relatedPosts.slice(0, MAX_SUGGESTIONS);

// If we don't have enough related posts, fill with recent ones
if (suggestedPosts.length < MAX_SUGGESTIONS) {
  const relatedUrls = suggestedPosts.map(post => normalizePath(post.url));
  const recentPosts = otherPosts
    .filter(post => !relatedUrls.includes(normalizePath(post.url))) // Exclude already selected related posts
    .sort((a, b) => new Date(b.frontmatter.date).valueOf() - new Date(a.frontmatter.date).valueOf());

  const needed = MAX_SUGGESTIONS - suggestedPosts.length;
  suggestedPosts = suggestedPosts.concat(recentPosts.slice(0, needed));
}
---
<BaseLayout title={frontmatter.title + " | Trained Tails Blog"}>
  <article class="max-w-4xl mx-auto px-4 py-8 prose prose-slate dark:prose-invert lg:prose-lg">
    <h1 class="text-3xl md:text-4xl font-bold mb-2">{frontmatter.title}</h1>
    <p class="text-sm text-slate-500 dark:text-slate-400 mb-8">
      Published on: {new Date(frontmatter.date).toLocaleDateString()}
      {frontmatter.tags && frontmatter.tags.length > 0 && (
        <span class="ml-4">Tags: {frontmatter.tags.join(', ')}</span>
      )}
    </p>
    {frontmatter.image && <img src={frontmatter.image} alt={frontmatter.title + " hero image"} class="w-full h-auto rounded-xl mb-8 shadow-lg" loading="lazy" />}

    {/* Markdown content goes here */}
    <slot />
  </article>

  {/* Suggested Posts Section */}
  {/* Always render the section wrapper */}
    <section class="max-w-4xl mx-auto px-4 py-12 mt-12 border-t border-slate-200 dark:border-slate-700">
      <h2 class="text-2xl md:text-3xl font-bold text-slate-800 dark:text-slate-100 mb-8 text-center">You Might Also Like</h2>
      <div class="grid gap-6 sm:gap-8 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 not-prose"> {/* Added not-prose */}
        {suggestedPosts.map(post => (
          <article class="bg-white dark:bg-slate-800 rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col">
            {post.frontmatter.image && (
              <a href={post.url} class="block">
                <img src={post.frontmatter.image} alt={post.frontmatter.title + " preview"} class="w-full h-40 object-cover" loading="lazy" /> {/* Adjusted height */}
              </a>
            )}
            <div class="p-4 sm:p-5 flex flex-col flex-grow"> {/* Adjusted padding */}
              <h3 class="text-lg sm:text-xl font-semibold mt-1 mb-2 flex-grow dark:text-white"> {/* Adjusted size/margin */}
                <a href={post.url} class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">{post.frontmatter.title}</a>
              </h3>
              <p class="text-slate-600 dark:text-slate-300 mb-3 text-sm line-clamp-3">{post.frontmatter.description}</p> {/* Added line-clamp */}
              <div class="mt-auto">
                 <a href={post.url} class="text-blue-600 dark:text-blue-400 hover:underline text-sm font-medium">Read more â†’</a>
              </div>
            </div>
          </article>
        ))}
      </div>
    </section>
  {/* End of section wrapper */}
</BaseLayout>
